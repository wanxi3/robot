Array.prototype.remove=function(value)
{
    for(var i=0,n=0;i<this.length;i++)
    {
        if(this[i]!= value)
        {
            this[n++]=this[i]
        }
    }
    this.length-=1
}

if (!("ace" in window)) {
  window.ace = {}
}
window.ace.click_event = $.fn.tap ? "tap" : "click";
var suiteTpl = $("#suite").html();
var caseTpl = $("#case").html();
var resourceTpl = $("#resource").html();
var keywordTpl = $("#keyword").html();
var bathUrl = "http://" + location.host;
//bathUrl = "http://192.168.30.245:8000";
var catTools = {
  isEmptyString: function(str){
    if(str === null || str === undefined || str.length == 0){
      return "";
    }
    else{
      return str;
    }
  }
}
var runCaseData = {testcase:[]};
$.ajax({
  url: bathUrl + "/tree_data/",
  type: 'get',
  dataType: 'json',
  success: function(result) {
    var tree = [],path = result['path'],lastName = path.split("/")[path.split("/").length - 1];
    runCaseData["sources"] = path;
    for(var key in result){
      var obj = {
        text: key,
        nodes: [],
        state: {
          expanded: false,
          path: path + "/" + key + '.html'
        }
      };
      if(key != "path"){
        for(var i = 0,length = result[key].length; i < length; i++){
          obj.nodes.push({text: result[key][i],state: {path: path + "/" + key + '.html',parentName: key}});
        }
        tree.push(obj);
      }
    }
    var suiteTreeState = {};
    var rightTree = $('#tree1').treeview({
      data: tree,
      showIcon: false,
      showCheckbox: true,
      onNodeSelected: function(event, node){
        var formData, formTpl, tableData = [], key = node.parentId ? node.parentId : node.nodeId, tableModel;
        if(!suiteTreeState[key] || !suiteTreeState[key].flag){
          $.ajax({
            url: bathUrl + "/suite_data/?path=" + node.state.path,
            async: false,
            type: 'get',
            dataType: 'json',
            success: function(result){
              suiteTreeState[key] = result;
            },
            error: function(xhr, type){

            }
          });
        };
        //树的子节点进入
        if(node.parentId !== undefined){
          tableModel = caseModel;
          for(var i = 0,length = suiteTreeState[key].data.testcases.length; i < length; i++){
            if(suiteTreeState[key].data.testcases[i]['case_name'] == node.text){
              formData = suiteTreeState[key].data.testcases[i];
              var setUp,tearDown;
              setUp = formData['case_setup'].args.length > 0 ? "|" + formData['case_setup'].args.join("|") : "";
              tearDown = formData['case_teardown'].args.length > 0 ? "|" + formData['case_teardown'].args.join("|") : "";
              formTpl = caseTpl.replace("case_doc_value", catTools.isEmptyString(formData['case_doc']));
              formTpl = formTpl.replace("case_setup_value", catTools.isEmptyString(formData['case_setup'].name) + setUp);
              formTpl = formTpl.replace("case_teardown_value", catTools.isEmptyString(formData['case_teardown'].name) + tearDown);
              formTpl = formTpl.replace("case_timeout_value", catTools.isEmptyString(formData['case_timeout']));
              formTpl = formTpl.replace("gridId", tabs.tableId + "-table");
              break;
            }
          }
          for(var i = 0; i < formData.case_steps.length; i++){
            var obj = {A: i+1, 0: formData.case_steps[i].keyword};
            var arr = [];
            arr = arr.concat(formData.case_steps[i].assign).concat([formData.case_steps[i].keyword]).concat(formData.case_steps[i].args);
            for(var j = 0; j < arr.length; j++){
              obj[j] = arr[j];
            }
            tableData.push(obj);
          }
        }
        else{
          tableModel = suiteModel;
          formData = suiteTreeState[key].data.setting;
          var suiteSetUp,suiteTearDown,testSetup,testTeardown;
          suiteSetUp = formData['suite_setup'].args.length > 0 ? "|" + formData['suite_setup'].args.join("|") : "";
          suiteTearDown = formData['suite_teardown'].args.length > 0 ? "|" + formData['suite_teardown'].args.join("|") : "";
          testSetup = formData['test_setup'].args.length > 0 ? "|" + formData['test_setup'].args.join("|") : "";
          testTeardown = formData['test_teardown'].args.length > 0 ? "|" + formData['test_teardown'].args.join("|") : "";
          formTpl = suiteTpl.replace("doc_value", catTools.isEmptyString(formData['doc']));
          formTpl = formTpl.replace("suite_setup_value", catTools.isEmptyString(formData['suite_setup'].name) + suiteSetUp);
          formTpl = formTpl.replace("suite_teardown_value", catTools.isEmptyString(formData['suite_teardown'].name) + suiteTearDown);
          formTpl = formTpl.replace("test_setup_value", catTools.isEmptyString(formData['test_setup'].name) + testSetup);
          formTpl = formTpl.replace("test_teardown_value", catTools.isEmptyString(formData['test_teardown'].name) + testTeardown);
          formTpl = formTpl.replace("test_timeout_value", catTools.isEmptyString(formData['test_timeout']));
          formTpl = formTpl.replace("gridId", tabs.tableId + "-table");
          tableData = formData.imports;
        }
        tabs.addTab(node.text, formTpl);
        initTable(tabs.tableId + "-table", tableData, tableModel);
        tabs.tableId++;
      },
      onNodeChecked: function(event, node) {
        if(node.parentId !== undefined){
          runCaseData.testcase.push((lastName + "." + node.state.parentName + "." + node.text ));
        }
		else{
          runCaseData.testcase = [];
          if(result[node.text]){
            for(var i = 0; i < result[node.text].length; i++){
                runCaseData.testcase.push((lastName + "." + node.text + "." + result[node.text][i] ));
            }
          }
        }
      },
      onNodeUnchecked: function (event, node) {
      	runCaseData.testcase.remove((lastName + "." + node.state.parentName + "." + node.text ));
      }
    });
    var findCheckableNodess = function() {
      return rightTree.treeview('search', [ $('.auto_input_search').val(), { ignoreCase: false, exactMatch: false } ]);
    };
    $('.auto_input_search').on('keyup', function (e) {
      findCheckableNodess();
    });
  },
  error: function(xhr, type) {
  }
});
//=======================================================================
var tabElement = $("#auto_tab");
tabElement.delegate(".auto_edit","click",function(){
  var editBtn = $(this);
  if(editBtn.html() == "编辑"){
    editBtn.html("完成");
    editBtn.parent().children("input").removeAttr("disabled");
  }
  else{
    editBtn.html("编辑");
    editBtn.parent().children("input").attr("disabled", "disabled");
  }
});
//=========================================
var tabStates = function(){
  var me = this;
  me.activeId = 0;
  me.nextId = 1;
  me.items = [{name: "Log", id: -1}];
  me.setActiveId = function(activeId){
    me.activeId = activeId;
  },
  me.getActiveId = function(){
    return me.activeId;
  },
  me.setNextId = function(nextId){
    me.nextId =nextId;
  },
  me.getNextId = function(){
    return me.nextId++;
  },
  me.addItem = function(item){
    me.items.push(item);
  },
  me.changeItem = function(id,flag){
    for(var i = 0, length = me.items.length; i < length; i++){
      if(me.items[i].id == id){
        me.items[i].isShow = flag;
        //隐藏或则显示div
        break;
      }
    }
  },
  me.findItem = function(name){
    for(var i = 0, length = me.items.length; i < length; i++){
      if(me.items[i].name == name){
        return me.items[i].id;
      }
    }
  }
};
//============================================
var handlerTabs = function(dom){
  var me = this;
  this.tableId = 0;
  me.state = new tabStates();
  this.tab = dom;
  this.navTabs = dom.children(".nav-tabs");
  this.tabContent = dom.children(".tab-content");
  this.navTabs.on("click", function(e){
    var selectTabid = $(e.target).attr("tabid");
    if(selectTabid !== undefined && selectTabid != "")
      me.state.setActiveId(selectTabid);
    else{
      $(e.target).closest("li").css("display","none");
      $("#auto_tab li").removeClass("active");
      $("#auto_tab .tab-content .tab-pane").removeClass("active");
      $("#autoTab-0").addClass("active");
      $("#autoTadNav-0").addClass("active");
      me.state.setActiveId(0);
      e.stopPropagation();
    }
  });
  this.setTabTpl = function(name, tpl){
    $("#autoTadNav-" + me.state.getActiveId()).removeClass("active");
    $("#autoTab-" + me.state.getActiveId()).removeClass("active");
    if(me.state.findItem(name) == 0 || me.state.findItem(name)){
      var tabId = me.state.findItem(name);
      me.state.setActiveId(tabId);
      $("#autoTadNav-" + tabId).css("display", "").addClass("active");
      $("#autoTab-" + tabId).addClass("active");
      //bindEditable("#autoTab-" + tabId);
      return false;
    }
    else{
      var tabId = me.state.getNextId();
      var tabTitle = '<li class="active" id="autoTadNav-' + tabId + '"><a data-toggle="tab" tabid="' + tabId + '" href="#autoTab-' + tabId + '" >' + name + '<i class="icon-remove"></i></a></li>';
      var tabContent = '<div id="autoTab-' + tabId + '" class="tab-pane active">' + tpl + '</div>';
      me.state.setActiveId(tabId);
      me.state.addItem({id: tabId, name: name, isShow: true});
      return {
        "tabTitle": tabTitle,
        "tabContent": tabContent,
        "tabId": tabId
      }
    }
  };
  this.addTab = function(name, tpl){
    var obj = this.setTabTpl(name, tpl);
    if(obj){
      this.navTabs.append(obj.tabTitle);
      this.tabContent.append(obj.tabContent);
    }
  };
  this.deleteTab = function(id){

  }
};
//=========================================
var tabs = new handlerTabs(tabElement);
var caseModel = {
  model:[
    // {name:'myac',index:'', width:60, fixed:true, sortable:false, resize:false,
    //   formatter:'actions',
    //   formatoptions:{
    //     keys:true,
    //     editOptions: {},
    //     addOptions: {},
    //     delOptions:{}
    //   }
    // },
    {name:'A', width:50, sortable:false, editable: true},
    {name:'0', width:150, sortable:false, editable: true},
    {name:'1', width:150, sortable:false, editable: true},
    {name:'2', width:150, sortable:false, editable: true},
    {name:'3', width:150, sortable:false, editable: true},
    {name:'4', width:150, sortable:false, editable: true},
    {name:'5', width:150, sortable:false, editable: true},
    {name:'6', width:150, sortable:false, editable: true},
    {name:'7', width:150, sortable:false, editable: true},
    {name:'8', width:150, sortable:false, editable: true}
  ],
  names: ['A','B','C', 'D', 'E','F', 'G', 'H', 'I' ,'J']
};

var suiteModel = {
  model:[
    {name:'type', width:150, sortable:false, editable: true},
    {name:'library', width:500, sortable:false, editable: true}
  ],
  names: ['import','Name/Path']
};

var resourceModel = {
  model:[
    {name:'variable_name', width:150, sortable:false, editable: true},
    {name:'variable_value', width:500, sortable:false, editable: true, formatter:function(value){return value.join(" | ");}}
  ],
  names: ['Variable','Value']
};
//=====================================================
var jqGridId = null;
var tabId = null;
var cellContent = "";
var initTable = function(str, data, obj,noTitle){
  jqGridId = str;
  var titleTpl =  "Case步骤<span class='icon-plus-sign auto_tb_icon_add'></span>";
  tabId = "#" + str;
  if(noTitle)
    titleTpl = "";
  $(tabId).jqGrid({
    data: data,
    datatype: "local",
    height: 250,
    colNames: obj.names,
    colModel: obj.model,
    rowNum:50,
    rowList:[10,20,30],
    altRows: true,
    scrollOffset: 0,
    multiboxonly: true,
    caption: titleTpl,
    //autowidth: true,
    cellEdit:true,
    cellsubmit: 'clientArray',
    editurl: 'clientArray',
    styleUI:'Bootstrap',
    onCellSelect:function(rowid,iCol,cellcontent,e) {
      cellContent = cellcontent;
    }
  });
  //console.log($(tabId).jqGrid('getGridParam'));
  doRigthClick();
};

function doRigthClick(){
  $(tabId).contextMenu('clickMenu',{
    bindings:{
      'insertRow': function(t){
        if(cellContent=="&nbsp;"){
          cellContent="";
        }
        var sRow = $(tabId).jqGrid('getGridParam','iRow');
        var sCol = $(tabId).jqGrid('getGridParam','iCol');
        var sId = tabId+" tbody tr:eq("+sRow+") td:eq("+sCol+")";
        $(sId).attr("tabindex","-1").removeClass().html(cellContent);
        var selectedRowId=$(tabId).jqGrid('getGridParam','selrow');
        if (selectedRowId) {
            var ids = $(tabId).jqGrid('getDataIDs');
            var rowid = Math.max.apply(Math,ids);
            var newrowid = rowid+1;
            $(tabId).jqGrid("addRowData", newrowid, {}, "before",selectedRowId);
        } else {
            $(tabId).jqGrid("addRowData", newrowid, {}, "first");
        }
      },
      'deleteRow': function(t){
        $(tabId).jqGrid('delRowData', $(tabId).jqGrid('getGridParam','selrow'));
      },
      'insertCell': function(t){
        var sRow = $(tabId).jqGrid('getGridParam','iRow');
        var sCol = $(tabId).jqGrid('getGridParam','iCol');
        var sId = tabId+" tbody tr:eq("+sRow+") td:eq("+sCol+")";
        $(sId).attr("tabindex","-1").removeClass();
        $('<td role="gridcell" style="width:150px"></td>').insertAfter(sId);
        },
      'deleteCell': function(t){
        var sRow = $(tabId).jqGrid('getGridParam','iRow');
        var sCol = $(tabId).jqGrid('getGridParam','iCol');
        $(tabId+" tbody tr:eq("+sRow+") td:eq("+sCol+")").remove();
      }
    }
  });
}
/****************************************************************************************/
function saveRows() {
    var grid = $('#'+jqGridId);
    var ids = grid.jqGrid('getDataIDs');
    for (var i = 0; i < ids.length; i++) {
        grid.jqGrid('saveRow', ids[i]);
    }
}
//============================================================
jQuery(function(a) {
  ace.handle_side_menu(jQuery);
});
ace.handle_side_menu = function(a) {
  a("#menu-toggler").on(ace.click_event, function() {
    a("#sidebar").toggleClass("display");
    a(this).toggleClass("display");
    return false
  });
  var c = a("#sidebar").hasClass("menu-min");
  a("#sidebar-collapse").on(ace.click_event, function() {
    c = a("#sidebar").hasClass("menu-min");
    ace.settings.sidebar_collapsed(!c)
  });
  var b = navigator.userAgent.match(/OS (5|6|7)(_\d)+ like Mac OS X/i);
  a(".nav-list").on(ace.click_event, function(h) {
    var g = a(h.target).closest("a");
    if (!g || g.length == 0) {
      return
    }
    c = a("#sidebar").hasClass("menu-min");
    if (!g.hasClass("dropdown-toggle")) {
      if (c && ace.click_event == "tap" && g.get(0).parentNode.parentNode == this) {
        var i = g.find(".menu-text").get(0);
        if (h.target != i && !a.contains(i, h.target)) {
          return false
        }
      }
      if (b) {
        document.location = g.attr("href");
        return false
      }
      return
    }
    var f = g.next().get(0);
    if (!a(f).is(":visible")) {
      var d = a(f.parentNode).closest("ul");
      if (c && d.hasClass("nav-list")) {
        return
      }
      d.find("> .open > .submenu").each(function() {
        if (this != f && !a(this.parentNode).hasClass("active")) {
          a(this).slideUp(200).parent().removeClass("open")
        }
      })
    } else {}
    if (c && a(f.parentNode.parentNode).hasClass("nav-list")) {
      return false
    }
    a(f).slideToggle(200).parent().toggleClass("open");
    return false
  })
};

var resourceState = {};

$("#leftMenu").on("click", function(e){
  var item = $(e.target).closest("a"), name = item.children("span").html(),parentName = item.attr("node-name");
  if(!resourceState[parentName]){
    $.ajax({
      url: bathUrl + "/resource_data/?path=" + item.attr("data-path"),
      type: 'get',
      dataType: 'json',
      async: false,
      success: function(result) {
        resourceState[name] = result;
      },
      error: function(result){
      	console.log(result);
      }
    });
  }
  //是父节点
  var formData,formTpl, tableData=[], keywordTearDown;
  if(name == parentName){
    formData = resourceState[parentName].settings;
    formTpl = resourceTpl.replace("doc_value", catTools.isEmptyString(formData['doc']));
    formTpl = formTpl.replace("gridId", tabs.tableId + "-table");
    formTpl = formTpl.replace("variableTable", tabs.tableId + "-variableTable");
    tableModel = suiteModel;
    tableData = formData.imports;
    tabs.addTab(name, formTpl);
    initTable(tabs.tableId + "-table", tableData, tableModel, true);
    initTable(tabs.tableId + "-variableTable", resourceState[parentName].variables, resourceModel, true);
    tabs.tableId++;
  }
  else if(name.indexOf("@") == 0 || name.indexOf("$") == 0){
    tabs.addTab(parentName, formTpl);
  }
  else{
    for(var i=0, length = resourceState[parentName].keywords.length; i < length; i++){
      if(resourceState[parentName].keywords[i].keyword_name == name){
        formData = resourceState[parentName].keywords[i];
        keywordTearDown = formData['keyword_teardown'].args.length > 0 ? "|" + formData['keyword_teardown'].args.join("|") : "";
        formTpl = keywordTpl.replace("keyword_doc_value", catTools.isEmptyString(formData['keyword_doc']));
        formTpl = formTpl.replace("keyword_arguments_value", catTools.isEmptyString(formData['keyword_args'].join(" | ")));
        formTpl = formTpl.replace("keyword_teardown_value", catTools.isEmptyString(formData['keyword_teardown'].name) + keywordTearDown);
        formTpl = formTpl.replace("keyword_timeout_value", catTools.isEmptyString(formData['keyword_timeout_value']));
        formTpl = formTpl.replace("keyword_return_value", catTools.isEmptyString(formData['keyword_return'].join(" | ")));
        formTpl = formTpl.replace("gridId", tabs.tableId + "-table");
        break;
      }
    }
    for(var i = 0; i < formData.keyword_steps.length; i++){
      var obj = {A: i+1, 0: formData.keyword_steps[i].keyword};
      var arr = [];
      arr = arr.concat(formData.keyword_steps[i].assign).concat([formData.keyword_steps[i].keyword]).concat(formData.keyword_steps[i].args);
      for(var j = 0; j < arr.length; j++){
        obj[j] = arr[j];
      }
      tableData.push(obj);
    }
    tabs.addTab(name, formTpl);
    initTable(tabs.tableId + "-table", tableData, caseModel, true);
    tabs.tableId++;
  }
  });
//===============================================
var runCaseFun = function(timestamp){
  $.ajax({
    url: bathUrl + "/output/?timestamp=" + timestamp,
    type: 'get',
    dataType: 'json',
    success: function(result) {
      $("#autoTab-0").html("<pre>" + result.output.join("") + "</pre>");
      if(result.flag){
        runCaseFun(timestamp);
      }
      else{
        $("#runCase").addClass("auto_btn_green");
        $("#log").addClass("auto_btn_green");
      }
    }
  });
};

$("#runCase").on("click", function(){
  if($(this).hasClass("auto_btn_green")){
    $("#log").removeClass("auto_btn_green");
    $(this).removeClass("auto_btn_green");
    $.ajax({
      url: bathUrl + "/run_case/",
      type: 'post',
      dataType: 'json',
      data: JSON.stringify(runCaseData),
      success: function(result) {
          console.log(11111);
        runCaseFun(result.timestamp);
      }
    });
  }
});
$("#log").on("click", function(){
	$.ajax({
      url: bathUrl + "/report/?path=" + runCaseData["sources"],
      type: 'get',
      dataType: 'json',
      success: function(result) {
		tabs.addTab("Log", "");
		var tpl = "";
		for(var i = 0; i < result.length; i++){
			var name = new Date(result[i].name * 1000).toLocaleString();
			tpl += '<div><a class="pc-report" target="_blank" href="' + result[i].path + '">' + name + '</a></div>'
		}
		$("#autoTab--1").html(tpl);
      }
    });
})
$("#home").on("click", function(){
	$("#main-page",parent.document).css("display","");
	$("#insideP", parent.document).css("display", "none");
});